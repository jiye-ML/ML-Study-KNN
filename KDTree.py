'''http://blog.csdn.net/pipisorry/article/details/52186307http://scikit-learn.org/stable/modules/neighbors.htmlhttp://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KDTree.html#sklearn.neighbors.KDTree'''import numpy as npimport picklefrom sklearn.neighbors import KDTree'''查询某个元素的k近邻'''# Pickle and Unpickle a tree. Note that the state of the tree is saved in the pickle operation:# the tree needs not be rebuilt upon unpickling.np.random.seed(0)X = np.random.random((10, 3))  # 10 points in 3 dimensionstree = KDTree(X, leaf_size=2)s = pickle.dumps(tree)tree_copy = pickle.loads(s)dist, ind = tree_copy.query([X[0]], k=3)print(ind)  # indices of 3 closest neighborsprint(dist)  # distances to 3 closest neighbors'''查询某个元素的半径下的近邻'''print("查询某个元素的半径下的近邻")np.random.seed(0)X = np.random.random((10, 3))  # 10 points in 3 dimensionstree = KDTree(X, leaf_size=2)print(tree.query_radius([X[0]], r=0.3, count_only=True))ind = tree.query_radius([X[0]], r=0.3)print(ind)  # indices of neighbors within distance 0.3'''query(X, k=1, return_distance=True, dualtree=False, breadth_first=False)'''print("\n测试 query 方法")tree = KDTree(X, leaf_size=2)dist, ind = tree.query([X[0]], k=3)print(ind)  # indices of 3 closest neighborsprint(dist)  # distances to 3 closest neighbors'''query_radius(self, X, r, count_only = False):'''print("\n测试 query_radius 方法")tree = KDTree(X, leaf_size=2)print(tree.query_radius([X[0]], r=0.3, count_only=True))ind = tree.query_radius([X[0]], r=0.3)print(ind)  # indices of neighbors within distance 0.3